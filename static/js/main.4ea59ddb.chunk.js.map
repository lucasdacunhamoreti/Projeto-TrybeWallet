{"version":3,"sources":["images/logo.svg","actions/index.js","pages/Login.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","getCurrencies","data","type","payload","Login","handleChange","target","setState","name","value","validateEmail","email","state","test","validatePassword","password","length","handleSubmit","props","history","push","this","dispatch","id","src","logo","alt","htmlFor","data-testid","onChange","className","placeholder","aria-label","aria-describedby","disabled","onClick","senha","actionLogin","React","Component","connect","INITIAL_STATE","description","currency","method","tag","Wallet","submitExpense","event","addExpense","expenses","preventDefault","sumExpenses","map","exchangeRates","Number","ask","reduce","accumulator","curr","toFixed","fetchReturnApi","currencies","deleteExpense","coin","key","scope","expense","user","wallet","a","fetch","then","response","json","walletState","currencyApi","currenciesData","App","exact","path","component","Boolean","window","location","hostname","match","action","Object","keys","filter","rootReducer","combineReducers","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4ea59ddb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7f611f0f.svg\";","// Coloque aqui suas actions\nexport const LOGIN_ACTION = 'LOGIN_ACTION';\nexport const GET_CURRENCIES = 'GET_CURRENCIES';\nexport const REQUEST_API = 'REQUEST_API';\nexport const ADD_EXPENSE = 'ADD_EXPENSE';\nexport const DELETE_EXPENSE = 'DELETE_EXPENSE';\n\nconst addExpense = (expense) => ({\n  type: ADD_EXPENSE,\n  payload: expense,\n});\n\nexport const removeExpense = (expense) => ({\n  type: 'REMOVE_EXPENSE',\n  payload: expense,\n});\n\nconst loginAction = (payload) => ({\n  type: LOGIN_ACTION,\n  payload,\n});\n\nfunction getCurrencies(data) {\n  return { type: GET_CURRENCIES, payload: data };\n}\n\nfunction requestApi() {\n  return { type: REQUEST_API };\n}\n\nexport function fetchApi() {\n  return async (dispatch) => {\n    dispatch(requestApi());\n    return fetch('https://economia.awesomeapi.com.br/json/all')\n      .then((response) => response.json())\n      .then((data) => dispatch(getCurrencies(data)));\n  };\n}\n\nexport const setExpense = (walletState) => async (dispatch) => {\n  const currencyApi = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const currenciesData = await currencyApi.json();\n  const payload = { ...walletState, exchangeRates: { ...currenciesData } };\n  dispatch(addExpense(payload));\n};\n\nexport const actionCreators = {\n  loginAction,\n};\n\nexport const LOGIN = 'LOGIN';\n\nexport function actionLogin(email, senha) {\n  return ({\n    type: LOGIN,\n    payload: { email, senha },\n  });\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { actionLogin } from '../actions';\nimport './Login.css';\nimport logo from '../images/logo.svg';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      password: '',\n    };\n  }\n\n  handleChange = ({ target }) => {\n    this.setState({\n      [target.name]: target.value,\n    });\n  }\n\n  validateEmail = () => {\n    const { email } = this.state;\n    const regex = /\\S+@\\S+\\.\\S+/;\n    return regex.test(email);\n  }\n\n  validatePassword = () => {\n    const { password } = this.state;\n    const MIN_LENGTH_PASSWORD = 6;\n    return password.length < MIN_LENGTH_PASSWORD;\n  };\n\n  handleSubmit = () => {\n    const { history } = this.props;\n    history.push('/carteira');\n  }\n\n  render() {\n    const { email, password } = this.state;\n    const { dispatch } = this.props;\n\n    return (\n      <div id=\"container-login\">\n        <img id=\"wallet-img\" src={ logo } alt=\"carteira\" />\n        <div>\n          <label htmlFor=\"email\">\n            <input\n              data-testid=\"email-input\"\n              name=\"email\"\n              value={ email }\n              type=\"text\"\n              onChange={ this.handleChange }\n              id=\"input-email\"\n              className=\"form-control\"\n              placeholder=\"Email\"\n              aria-label=\"Email\"\n              aria-describedby=\"basic-addon1\"\n            />\n          </label>\n        </div>\n        <div>\n          <label htmlFor=\"password\">\n            <input\n              data-testid=\"password-input\"\n              value={ password }\n              name=\"password\"\n              type=\"password\"\n              onChange={ this.handleChange }\n              className=\"form-control\"\n              placeholder=\"Senha\"\n              aria-label=\"Senha\"\n              aria-describedby=\"basic-addon1\"\n            />\n          </label>\n        </div>\n        <button\n          disabled={ !this.validateEmail() || this.validatePassword() }\n          type=\"button\"\n          className=\"btn btn-success\"\n          onClick={ () => {\n            dispatch(actionLogin(email, password));\n            this.handleSubmit();\n          } }\n        >\n          Entrar\n        </button>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  history: PropTypes.shape({ push: PropTypes.func.isRequired }),\n  dispatch: PropTypes.object.isRequired,\n}.isRequired;\n\nexport default connect()(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchApi, setExpense, removeExpense } from '../actions';\nimport './Wallet.css';\nimport logo from '../images/logo.svg';\n\nconst INITIAL_STATE = {\n  value: '',\n  description: '',\n  currency: 'USD',\n  method: 'Dinheiro',\n  tag: 'Alimentação',\n};\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n\n    this.state = INITIAL_STATE;\n  }\n\n  componentDidMount() {\n    const { fetchReturnApi } = this.props;\n    fetchReturnApi();\n  }\n\n  handleChange = ({ target }) => {\n    this.setState({ [target.name]: target.value });\n  }\n\n  submitExpense = (event) => {\n    const { addExpense, expenses } = this.props;\n    event.preventDefault();\n    const id = expenses.length;\n    const idPlusExpense = { id, ...this.state };\n    addExpense(idPlusExpense);\n    this.setState(INITIAL_STATE);\n  }\n\n  sumExpenses = () => {\n    const { expenses } = this.props;\n    if (expenses.length === 0) return 0;\n    const total = expenses\n      .map(({ value, currency, exchangeRates }) => (\n        Number(value) * Number(exchangeRates[currency].ask)\n      ))\n      .reduce((accumulator, curr) => accumulator + curr);\n    return total.toFixed(2);\n  };\n\n  render() {\n    const { email, currencies, expenses, deleteExpense } = this.props;\n    const { value, description, currency, method, tag } = this.state;\n    return (\n      <div>\n        <header id=\"container-header\">\n          <div>\n            <img src={ logo } alt=\"logo\" />\n          </div>\n          <div id=\"container-info-header\">\n            <h5 data-testid=\"email-field\">\n              Email:\n              { email }\n            </h5>\n            <h5 id=\"expense-total\" data-testid=\"total-field\">\n              Despesa Total: R$\n              { Number(this.sumExpenses()).toFixed(2) }\n            </h5>\n            <h5 data-testid=\"header-currency-field\">BRL</h5>\n          </div>\n        </header>\n\n        <div id=\"container-add-expense\">\n          <label htmlFor=\"value\">\n            <input\n              id=\"value\"\n              name=\"value\"\n              value={ value }\n              onChange={ this.handleChange }\n              data-testid=\"value-input\"\n              type=\"number\"\n              placeholder=\"Valor da despesa\"\n              className=\"form-control\"\n              aria-label=\"Valor da despesa\"\n              aria-describedby=\"basic-addon1\"\n            />\n          </label>\n\n          <label htmlFor=\"description\">\n            <input\n              id=\"description\"\n              data-testid=\"description-input\"\n              type=\"text\"\n              placeholder=\"Descrição da despesa\"\n              name=\"description\"\n              value={ description }\n              onChange={ this.handleChange }\n              className=\"form-control\"\n              aria-label=\"Descrição da despesa\"\n              aria-describedby=\"basic-addon1\"\n            />\n          </label>\n\n          <label htmlFor=\"currencies\">\n            Moeda\n            <select\n              name=\"currency\"\n              value={ currency }\n              id=\"currencies\"\n              onChange={ this.handleChange }\n              className=\"form-select\"\n            >\n              {currencies.map((coin) => (\n                <option key={ coin } value={ coin }>{coin}</option>\n              ))}\n            </select>\n          </label>\n\n          <label htmlFor=\"payment_method\">\n            Método de pagamento\n            <select\n              data-testid=\"method-input\"\n              name=\"method\"\n              value={ method }\n              id=\"payment_method\"\n              onChange={ this.handleChange }\n              className=\"form-select\"\n            >\n              <option>Dinheiro</option>\n              <option>Cartão de crédito</option>\n              <option>Cartão de débito</option>\n            </select>\n          </label>\n\n          <label htmlFor=\"category\">\n            Categoria\n            <select\n              data-testid=\"tag-input\"\n              name=\"tag\"\n              value={ tag }\n              id=\"category\"\n              onChange={ this.handleChange }\n              className=\"form-select\"\n            >\n              <option>Alimentação</option>\n              <option>Lazer</option>\n              <option>Trabalho</option>\n              <option>Transporte</option>\n              <option>Saúde</option>\n            </select>\n          </label>\n\n          <button\n            disabled={ !value || !description || !currency || !method || !tag }\n            type=\"submit\"\n            onClick={ this.submitExpense }\n            className=\"btn btn-info\"\n          >\n            Adicionar despesa\n\n          </button>\n        </div>\n\n        <table className=\"table table-bordered\">\n          <thead>\n            <tr id=\"descriptions-table\">\n              <th scope=\"col\">Descrição</th>\n              <th scope=\"col\">Tag</th>\n              <th scope=\"col\">Método de pagamento</th>\n              <th scope=\"col\">Valor</th>\n              <th scope=\"col\">Moeda</th>\n              <th scope=\"col\">Câmbio utilizado</th>\n              <th scope=\"col\">Valor convertido</th>\n              <th scope=\"col\">Moeda de conversão</th>\n              <th scope=\"col\">Editar/Excluir</th>\n            </tr>\n          </thead>\n          <tbody>\n            { expenses.map((expense) => (\n              <tr key={ expense.id }>\n                <td>{ expense.description }</td>\n                <td>{ expense.tag }</td>\n                <td>{ expense.method }</td>\n                <td>\n                  R$\n                  { Number(expense.value).toFixed(2) }\n                </td>\n                <td>\n                  { expense.exchangeRates[expense.currency].name }\n                </td>\n                <td>\n                  R$\n                  { Number(expense.exchangeRates[expense.currency].ask)\n                    .toFixed(2) }\n                </td>\n                <td>\n                  R$\n                  { Number(expense.value * expense.exchangeRates[expense.currency].ask)\n                    .toFixed(2) }\n                </td>\n                <td>Real</td>\n                <td>\n                  <button\n                    type=\"button\"\n                    data-testid=\"delete-btn\"\n                    onClick={ () => deleteExpense(expense) }\n                    className=\"btn btn-danger\"\n                  >\n                    Excluir\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  currencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchReturnApi: (data) => dispatch(fetchApi(data)),\n  addExpense: (state) => dispatch(setExpense(state)),\n  deleteExpense: (state) => dispatch(removeExpense(state)),\n});\n\nWallet.propTypes = {\n  email: PropTypes.object,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n\nWallet.propTypes = {\n  email: PropTypes.string.isRequired,\n  addExpense: PropTypes.func.isRequired,\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route exact path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { LOGIN } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n  senha: '',\n};\n\nconst user = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case LOGIN:\n    return {\n      ...state,\n      email: action.payload.email,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\n// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { GET_CURRENCIES, REQUEST_API, ADD_EXPENSE } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  fetch: false,\n};\n\nconst wallet = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case REQUEST_API:\n    return {\n      ...state,\n      fetch: true,\n    };\n  case GET_CURRENCIES:\n    return {\n      ...state,\n      fetch: false,\n      currencies: Object.keys(action.payload).filter((coin) => coin !== 'USDT'),\n    };\n  case ADD_EXPENSE:\n    return { ...state, expenses: [...state.expenses, action.payload] };\n  case 'REMOVE_EXPENSE':\n    return {\n      ...state,\n      expenses: [...state.expenses.filter((expense) => expense !== action.payload)],\n    };\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\nimport { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter basename={ process.env.PUBLIC_URL }>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}